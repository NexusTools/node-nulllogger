import { LoggerLevel, INullLogger, ILoggerImpl } from "../types";
declare const _default: {
    new (...scopes: string[]): {
        _scopeCache: any;
        _scopes: string[];
        gears(...messages: any[]): any;
        timer(name: string, impl: (logger: INullLogger) => void): any;
        timerAsync(name: string, impl: (logger: INullLogger, cb: Function) => void): any;
        performance(...messages: any[]): any;
        perf(...messages: any[]): any;
        debugging(...messages: any[]): any;
        debug(...messages: any[]): any;
        info(...messages: any[]): any;
        information(...messages: any[]): any;
        warn(...messages: any[]): any;
        warning(...messages: any[]): any;
        error(...messages: any[]): any;
        fatal(...messages: any[]): void;
        extend(...scopes: string[]): any;
        group(name: string, impl: (logger: INullLogger) => void): any;
        updateScopeName(scope: string, index?: number): any;
        scopeName(index?: number): string;
    };
    Impl: ILoggerImpl;
    _init(): any;
    log(level: LoggerLevel, loggerOrScopesOrScopeCache: string | INullLogger | string[], messages: any[]): void;
    gears(...messages: any[]): void;
    performance(...messages: any[]): void;
    perf(...messages: any[]): void;
    debugging(...messages: any[]): void;
    debug(...messages: any[]): void;
    info(...messages: any[]): void;
    information(...messages: any[]): void;
    warn(...messages: any[]): void;
    warning(...messages: any[]): void;
    error(...messages: any[]): void;
    fatal(...messages: any[]): void;
    env(env?: any): any;
    setMinLevel?(level: LoggerLevel): void;
    minLevel?(): LoggerLevel;
    impl(): string;
};
export = _default;
